{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-MiniProject2"
		},
		"AzureSQL_MiniProject2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSQL_MiniProject2'"
		},
		"Blob_miniproject2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Blob_miniproject2'"
		},
		"MongoDbAtlas1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MongoDbAtlas1'"
		},
		"AzureSQL_MiniProject2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "server-tushar.database.windows.net"
		},
		"AzureSQL_MiniProject2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB-MiniProject2"
		},
		"AzureSQL_MiniProject2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "tsetoffice"
		},
		"MongoDbAtlas1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SurveyApp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion_pipeline_fullstack')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy the data collections in the raw format stored in the mongo server into the SQL database",
				"activities": [
					{
						"name": "Users Data",
						"description": "copy from mongo server to sql db",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Username']"
										},
										"sink": {
											"name": "Username",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Designations']"
										},
										"sink": {
											"name": "Designation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Password']"
										},
										"sink": {
											"name": "Password",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Users_Data_DB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Admin data",
						"description": "copy from mongo server to sql db",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Username']"
										},
										"sink": {
											"name": "Username",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Password']"
										},
										"sink": {
											"name": "Password",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Admin",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Admin_Data_DB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Form Responses data",
						"description": "copy from mongo server to blob storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "FormID"
										}
									},
									{
										"source": {
											"path": "$['Username']"
										},
										"sink": {
											"name": "Username"
										}
									},
									{
										"source": {
											"path": "$['Responses'][0]['Question']"
										},
										"sink": {
											"name": "Question"
										}
									},
									{
										"source": {
											"path": "$['Responses'][0]['Response'][0]"
										},
										"sink": {
											"name": "Response"
										}
									}
								],
								"collectionReference": "$['Responses']"
							}
						},
						"inputs": [
							{
								"referenceName": "Form_Responses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "FormResponses_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Forms Data",
						"description": "copy from mongo server to blob storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['formAbout']"
										},
										"sink": {
											"name": "Form Description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['formAvailable'][0]"
										},
										"sink": {
											"name": "Access To",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['formValues'][0]['id']['$numberInt']"
										},
										"sink": {
											"name": "FormID",
											"type": "Int16"
										}
									},
									{
										"source": {
											"path": "$['formValues'][0]['question']"
										},
										"sink": {
											"name": "Question",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['formValues'][0]['questionType']"
										},
										"sink": {
											"name": "Question Type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['formValues'][0]['options'][0]"
										},
										"sink": {
											"name": "Options",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['formValues']"
							}
						},
						"inputs": [
							{
								"referenceName": "Forms",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "FormsData_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Questions Data",
						"description": "copy from mongo server to sql db",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']['$numberInt']"
										},
										"sink": {
											"name": "FormID"
										}
									},
									{
										"source": {
											"path": "$['question']"
										},
										"sink": {
											"name": "Question"
										}
									},
									{
										"source": {
											"path": "$['questionType']"
										},
										"sink": {
											"name": "Question Type"
										}
									},
									{
										"source": {
											"path": "$['options'][0]"
										},
										"sink": {
											"name": "Options"
										}
									}
								],
								"collectionReference": "$['options']"
							}
						},
						"inputs": [
							{
								"referenceName": "Questions",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Question_Data_DB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Users')]",
				"[concat(variables('factoryId'), '/datasets/Users_Data_DB')]",
				"[concat(variables('factoryId'), '/datasets/Admin')]",
				"[concat(variables('factoryId'), '/datasets/Admin_Data_DB')]",
				"[concat(variables('factoryId'), '/datasets/Form_Responses')]",
				"[concat(variables('factoryId'), '/datasets/FormResponses_blob')]",
				"[concat(variables('factoryId'), '/datasets/Forms')]",
				"[concat(variables('factoryId'), '/datasets/FormsData_blob')]",
				"[concat(variables('factoryId'), '/datasets/Questions')]",
				"[concat(variables('factoryId'), '/datasets/Question_Data_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion_pipeline_webScraping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy the web scraped data from the blob to the SQL database",
				"activities": [
					{
						"name": "Misumi Products",
						"description": "Import the dataset from the blob to the SQL database",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Item ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ItemCategory",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Sub Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubCategory",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Misumi_ProductCategories",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Misumi_Products_DB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Misumi_ProductCategories')]",
				"[concat(variables('factoryId'), '/datasets/Misumi_Products_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preparation_Pipeline_webScraping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Preparation of Misumi data",
						"description": "run the dataflow pipeline for preparation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Misumi_Preparation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Misumi": {},
									"Items": {},
									"CleanedMergedData": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continueOnError": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_Misumi_Preparation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Admin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbAtlas1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "admins"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbAtlas1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Admin_Data_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "admin"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FormResponses_Data_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "formResponses"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Form_Responses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbAtlas1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "form responses"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbAtlas1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Forms')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbAtlas1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "forms"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbAtlas1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Forms_Data_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "forms"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Merged_Items_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "merged_items_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misumi_Items_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "misumi_items"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misumi_Items_per_ProductCategories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob_miniproject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "item_data.csv",
						"container": "container-miniproject2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "categoryCode",
						"type": "String"
					},
					{
						"name": "categoryName",
						"type": "String"
					},
					{
						"name": "seriesCode",
						"type": "String"
					},
					{
						"name": "seriesName",
						"type": "String"
					},
					{
						"name": "brandName",
						"type": "String"
					},
					{
						"name": "earliestShipping",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_miniproject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misumi_ProductCategories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob_miniproject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.csv",
						"container": "container-miniproject2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Item ",
						"type": "String"
					},
					{
						"name": "Sub Category",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_miniproject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misumi_Products_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "misumi_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Question_Data_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "questions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Questions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbAtlas1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "questions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbAtlas1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Users data stored during signup",
				"linkedServiceName": {
					"referenceName": "MongoDbAtlas1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbAtlas1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Users_Data_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQL_MiniProject2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SQL database for the mini project assessment",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSQL_MiniProject2_properties_typeProperties_server')]",
					"database": "[parameters('AzureSQL_MiniProject2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSQL_MiniProject2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSQL_MiniProject2_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_miniproject2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Blob_miniproject2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbAtlas1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbAtlas",
				"typeProperties": {
					"connectionString": "[parameters('MongoDbAtlas1_connectionString')]",
					"database": "[parameters('MongoDbAtlas1_properties_typeProperties_database')]",
					"driverVersion": "v2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Misumi_Preparation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merging the individual items and product categories and cleaning process",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Misumi_ProductCategories",
								"type": "DatasetReference"
							},
							"name": "Misumi"
						},
						{
							"dataset": {
								"referenceName": "Misumi_Items_per_ProductCategories",
								"type": "DatasetReference"
							},
							"name": "Items"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CleanedMergedData",
								"type": "DatasetReference"
							},
							"name": "CleanedMergedData",
							"description": "merge the products and items table and output the final cleaned column to the sink and store it in the DB"
						}
					],
					"transformations": [
						{
							"name": "updateDescriptionColumn"
						},
						{
							"name": "join"
						},
						{
							"name": "checkDuplicates",
							"description": "drop duplicates rows"
						},
						{
							"name": "duplicateColumns",
							"description": "drop duplicate columns"
						},
						{
							"name": "derivedShippingColumn",
							"description": "if the shipping column has value as o replace it as same day "
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Item } as string,",
						"          {Sub Category} as string,",
						"          Category as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Misumi",
						"source(output(",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandName as string,",
						"          earliestShipping as string,",
						"          description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Items",
						"Items derive(description = regexReplace(description, \"<.*?>|[^\\\\sa-zA-Z0-9_.-]\", \" \")) ~> updateDescriptionColumn",
						"Misumi, updateDescriptionColumn join({Item } == categoryName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join aggregate(groupBy(categoryCode,",
						"          seriesCode),",
						"     each(match(!in(['categoryCode','seriesCode'],name)), $$ = first($$))) ~> checkDuplicates",
						"checkDuplicates select(mapColumn(",
						"          Series_Code = seriesCode,",
						"          Item_Category_Code = categoryCode,",
						"          Series_Name = seriesName,",
						"          Item_Category = {Item },",
						"          Sub_Category = {Sub Category},",
						"          Category,",
						"          Brand = brandName,",
						"          EarliestShipping = earliestShipping,",
						"          Description = description",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> duplicateColumns",
						"duplicateColumns derive(EarliestShipping = iif(EarliestShipping == \"0\", \"Same day\", EarliestShipping + \" days\")) ~> derivedShippingColumn",
						"derivedShippingColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedMergedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Misumi_ProductCategories')]",
				"[concat(variables('factoryId'), '/datasets/Misumi_Items_per_ProductCategories')]",
				"[concat(variables('factoryId'), '/datasets/CleanedMergedData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CleanedMergedData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_MiniProject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "merged_items_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_MiniProject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FormsData_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob_miniproject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "forms_data.json",
						"folderPath": "fullstack",
						"container": "container-miniproject2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_miniproject2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FormResponses_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob_miniproject2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "formResponses.json",
						"folderPath": "fullstack",
						"container": "container-miniproject2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_miniproject2')]"
			]
		}
	]
}